/*******************************************************************************
 * COPYRIGHT Ericsson 2021
 *
 *
 *
 * The copyright to the computer program(s) herein is the property of
 *
 * Ericsson Inc. The programs may be used and/or copied only with written
 *
 * permission from Ericsson Inc. or in accordance with the terms and
 *
 * conditions stipulated in the agreement/contract under which the
 *
 * program(s) have been supplied.
 ******************************************************************************/

package com.ericsson.oss.adc.controller.enmfls;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RestController;

import com.ericsson.oss.adc.api.SampleApi;
import com.ericsson.oss.adc.handler.FileHandler;
import com.ericsson.oss.adc.models.MetaData;
import com.ericsson.oss.adc.models.ResponseData;
import com.ericsson.oss.adc.services.AuthenticationService;

/**
 * Implementation of SampleApi generated by open api generator.
 */
@RestController
public class EnmFlsRestController implements SampleApi {
    private static final Logger LOG = LoggerFactory.getLogger(EnmFlsRestController.class);

    @Autowired
    AuthenticationService authenticationService;

    @Autowired
    FileHandler fileHandler;

    @Override
    public ResponseEntity<String> sample() {
        LOG.info("Sample service called sample.");
        return new ResponseEntity<>("Sample response", HttpStatus.OK);
    }

    /**
     * Handles /login endpoint of ENM FLS
     * <p>
     * It just returns 200 OK to any login requests.
     */
    @Override
    public ResponseEntity<String> login() {
        LOG.info("Login service invoked");
        final MultiValueMap<String, String> headers = authenticationService.authenticate();
        return new ResponseEntity<>("{\"code\":\"SUCCESS\",\"message\":\"Authentication Successful\"}", headers, HttpStatus.FOUND);
    }

    /**
     * Handles /file/v1/files endpoint of ENM FLS
     * <p>
     * Two types of query are supported:
     * a) Initial query to get the current file id:
     * http://enm1:443/file/v1/files?filter=dataType%3D%3DPM_STATISTICAL&select=id&limit=1&offset=0&orderBy=id%20desc
     * b) Ordinary query to get the list of new files:
     * http://enm1:443/file/v1/files?filter=dataType%3D%3DPM_STATISTICAL;id%3Dgt%3D0&select=id,nodeName,dataType,nodeType,fileLocation&offset=0&orderBy=id%20asc
     * Filtering is done by id and dataType.
     * http://enm1:443/file/v1/files?filter=dataType%3D%3DPM_STATISTICAL;nodeType%3D%3DRadioNode;id%3Dgt%3D0&select=id,nodeName,dataType,nodeType,fileLocation&offset=0&orderBy=id%20asc
     * Filtering is done by id, nodeType and dataType.
     *
     * @param filter contains the required dataType and flsId
     * @param select columns to be included in the response
     * @param offset
     * @param orderBy asc for ordinary query, desc for initial query
     */
    @Override
    public ResponseEntity<Object> getFiles(final String filter, final String select, final String offset, final String orderBy) {

        // Redirect to login page when not authenticated
        if (!authenticationService.isLoggedIn()) {
            final MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
            headers.add("Content-Type", "text/html; charset=UTF-8");
            return new ResponseEntity<>("login page - text/html page", headers, HttpStatus.OK);
        }
        if (orderBy.contains("desc")) {
            LOG.info("Initial query called.");
            final ResponseData responseData = new ResponseData(Arrays.asList(new MetaData(fileHandler.getIdCounter().get())));
            return new ResponseEntity<>(responseData, HttpStatus.OK);
        }
        List<Object> responseList = new ArrayList<>();
        FilterParams filterParams = new FilterParams(filter);
        if (filterParams.getDataType() != null && filterParams.getId() != null) {
            synchronized (fileHandler) {
                responseList = fileHandler.getAvailableFiles().stream().filter(u -> {
                    final String filterParamDataType = filterParams.getDataType();
                    final String filterParamNodeType = filterParams.getNodeType();
                    final String filterParamId = filterParams.getId();
                    final MetaData metaData = (MetaData) u;
                    return metaData.getId() > Long.valueOf(filterParamId) && isFilterMatch(filterParamDataType, filterParamNodeType, metaData);
                }).collect(Collectors.toList());
            }
            LOG.info("FLS endpoint called with filter: {} select: {} offset: {} orderBy: {}", filter, select, offset, orderBy);
            LOG.info("Response contains {} files", responseList.size());
            return new ResponseEntity<>(new ResponseData(responseList), HttpStatus.OK);
        } else {
            LOG.error("Cannot parse dataType and id from URL parameter filter.");
            return new ResponseEntity<>(new ResponseData(responseList), HttpStatus.BAD_REQUEST);
        }
    }

    boolean isFilterMatch(final String filterParamDataType, final String filterParamNodeType, final MetaData metaData) {
        return isFilterMatchByParam(filterParamDataType, metaData.getDataType())
                && isFilterMatchByParam(filterParamNodeType, metaData.getNodeType());
    }

    private boolean isFilterMatchByParam(final String filterParamName, final String metaDataName) {
        if (metaDataName == null) {
            return false;
        }
        if (filterParamName == null) {
            return true;
        }
        return metaDataName.matches(filterParamName.replace("*", "(.*)"));
    }
}
